@if (ShowResults)
{
    <Blazorise.Table Striped>
        <Blazorise.TableHeader>
            <Blazorise.TableRow>
                <Blazorise.TableHeaderCell>User</Blazorise.TableHeaderCell>
                <Blazorise.TableHeaderCell>Estimate</Blazorise.TableHeaderCell>
            </Blazorise.TableRow>
        </Blazorise.TableHeader>
        <Blazorise.TableBody>

            @foreach (var entry in InputResults!)
            {
                <Blazorise.TableRow>
                    <Blazorise.TableRowCell>@entry.Key</Blazorise.TableRowCell>
                    <Blazorise.TableRowCell>@entry.Value</Blazorise.TableRowCell>
                </Blazorise.TableRow>
            }

        </Blazorise.TableBody>
    </Blazorise.Table>

    <Blazorise.Table Striped>
        <Blazorise.TableHeader>
            <Blazorise.TableRow>
                <Blazorise.TableHeaderCell>Average Score</Blazorise.TableHeaderCell>
            </Blazorise.TableRow>
        </Blazorise.TableHeader>
        <Blazorise.TableBody>
            <Blazorise.TableRow>
                <Blazorise.TableRowCell>
                    @GetAverageResult()
                    @if (HasNonCommittedEstimates)
                    {
                        <Blazorise.Badge Color="Blazorise.Color.Info" Pill>Some people were unsure or want a beverage</Blazorise.Badge>
                    }
                </Blazorise.TableRowCell>
            </Blazorise.TableRow>
        </Blazorise.TableBody>
    </Blazorise.Table>
}
else
{
    <Blazorise.Table Striped>
        <Blazorise.TableHeader>
            <Blazorise.TableRow>
                <Blazorise.TableHeaderCell>User</Blazorise.TableHeaderCell>
                <Blazorise.TableHeaderCell>Estimate</Blazorise.TableHeaderCell>
            </Blazorise.TableRow>
        </Blazorise.TableHeader>
        <Blazorise.TableBody>

            @foreach (var entry in InputResults)
            {
                <Blazorise.TableRow>
                    <Blazorise.TableRowCell>@entry.Key</Blazorise.TableRowCell>
                    <Blazorise.TableRowCell>???</Blazorise.TableRowCell>
                </Blazorise.TableRow>
            }

        </Blazorise.TableBody>
    </Blazorise.Table>

    <Blazorise.Table Striped>
        <Blazorise.TableHeader>
            <Blazorise.TableRow>
                <Blazorise.TableHeaderCell>Average Score</Blazorise.TableHeaderCell>
            </Blazorise.TableRow>
        </Blazorise.TableHeader>
        <Blazorise.TableBody>
            <Blazorise.TableRow>
                <Blazorise.TableRowCell>???</Blazorise.TableRowCell>
            </Blazorise.TableRow>
        </Blazorise.TableBody>
    </Blazorise.Table>
}

@code {
    [Parameter]
    public Dictionary<string, string>? InputResults { get; set; }

    [Parameter]
    public bool ShowResults { get; set; }

    private bool HasNonCommittedEstimates = false;

    private List<int> GetIntegerEstimates()
    {
        List<int> integerValues = new();
        foreach (var entry in InputResults!)
        {
            int.TryParse(entry.Value, out int output);
            if (output > 0)
            {
                integerValues.Add(output);
            }
        }
        return integerValues;
    }

    private string GetAverageResult()
    {

        var integerValues = GetIntegerEstimates();
        HasNonCommittedEstimates = integerValues.Count != InputResults!.Count;
        if (integerValues.Any())
        {           
            return $"{integerValues.Average().ToString()} ";
        }
        else
        {
            return "N/A ";
        }
    }
}
